// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class Listing extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Listing entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Listing must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Listing", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Listing | null {
    return changetype<Listing | null>(store.get_in_block("Listing", id));
  }

  static load(id: string): Listing | null {
    return changetype<Listing | null>(store.get("Listing", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get listingId(): BigInt {
    let value = this.get("listingId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set listingId(value: BigInt) {
    this.set("listingId", Value.fromBigInt(value));
  }

  get seller(): string {
    let value = this.get("seller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set seller(value: string) {
    this.set("seller", Value.fromString(value));
  }

  get nftAddress(): Bytes {
    let value = this.get("nftAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set nftAddress(value: Bytes) {
    this.set("nftAddress", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get isSold(): boolean {
    let value = this.get("isSold");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set isSold(value: boolean) {
    this.set("isSold", Value.fromBoolean(value));
  }

  get listedAt(): BigInt {
    let value = this.get("listedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set listedAt(value: BigInt) {
    this.set("listedAt", Value.fromBigInt(value));
  }

  get soldAt(): BigInt | null {
    let value = this.get("soldAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set soldAt(value: BigInt | null) {
    if (!value) {
      this.unset("soldAt");
    } else {
      this.set("soldAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get purchase(): PurchaseLoader {
    return new PurchaseLoader(
      "Listing",
      this.get("id")!.toString(),
      "purchase",
    );
  }
}

export class Purchase extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Purchase entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Purchase must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Purchase", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Purchase | null {
    return changetype<Purchase | null>(store.get_in_block("Purchase", id));
  }

  static load(id: string): Purchase | null {
    return changetype<Purchase | null>(store.get("Purchase", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get listing(): string | null {
    let value = this.get("listing");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set listing(value: string | null) {
    if (!value) {
      this.unset("listing");
    } else {
      this.set("listing", Value.fromString(<string>value));
    }
  }

  get buyer(): string {
    let value = this.get("buyer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set buyer(value: string) {
    this.set("buyer", Value.fromString(value));
  }

  get seller(): string {
    let value = this.get("seller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set seller(value: string) {
    this.set("seller", Value.fromString(value));
  }

  get nftAddress(): Bytes {
    let value = this.get("nftAddress");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set nftAddress(value: Bytes) {
    this.set("nftAddress", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get totalListings(): BigInt {
    let value = this.get("totalListings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalListings(value: BigInt) {
    this.set("totalListings", Value.fromBigInt(value));
  }

  get totalPurchases(): BigInt {
    let value = this.get("totalPurchases");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalPurchases(value: BigInt) {
    this.set("totalPurchases", Value.fromBigInt(value));
  }

  get totalSales(): BigInt {
    let value = this.get("totalSales");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalSales(value: BigInt) {
    this.set("totalSales", Value.fromBigInt(value));
  }

  get totalVolumeAsBuyer(): BigInt {
    let value = this.get("totalVolumeAsBuyer");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVolumeAsBuyer(value: BigInt) {
    this.set("totalVolumeAsBuyer", Value.fromBigInt(value));
  }

  get totalVolumeAsSeller(): BigInt {
    let value = this.get("totalVolumeAsSeller");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVolumeAsSeller(value: BigInt) {
    this.set("totalVolumeAsSeller", Value.fromBigInt(value));
  }

  get firstActivityAt(): BigInt {
    let value = this.get("firstActivityAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set firstActivityAt(value: BigInt) {
    this.set("firstActivityAt", Value.fromBigInt(value));
  }

  get lastActivityAt(): BigInt {
    let value = this.get("lastActivityAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastActivityAt(value: BigInt) {
    this.set("lastActivityAt", Value.fromBigInt(value));
  }

  get listings(): ListingLoader {
    return new ListingLoader("User", this.get("id")!.toString(), "listings");
  }

  get purchases(): PurchaseLoader {
    return new PurchaseLoader("User", this.get("id")!.toString(), "purchases");
  }

  get sales(): PurchaseLoader {
    return new PurchaseLoader("User", this.get("id")!.toString(), "sales");
  }
}

export class Collection extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Collection entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Collection must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Collection", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Collection | null {
    return changetype<Collection | null>(store.get_in_block("Collection", id));
  }

  static load(id: string): Collection | null {
    return changetype<Collection | null>(store.get("Collection", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get totalListings(): BigInt {
    let value = this.get("totalListings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalListings(value: BigInt) {
    this.set("totalListings", Value.fromBigInt(value));
  }

  get totalSales(): BigInt {
    let value = this.get("totalSales");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalSales(value: BigInt) {
    this.set("totalSales", Value.fromBigInt(value));
  }

  get totalVolume(): BigInt {
    let value = this.get("totalVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVolume(value: BigInt) {
    this.set("totalVolume", Value.fromBigInt(value));
  }

  get floorPrice(): BigInt {
    let value = this.get("floorPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set floorPrice(value: BigInt) {
    this.set("floorPrice", Value.fromBigInt(value));
  }

  get ceilingPrice(): BigInt {
    let value = this.get("ceilingPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set ceilingPrice(value: BigInt) {
    this.set("ceilingPrice", Value.fromBigInt(value));
  }

  get averagePrice(): BigInt {
    let value = this.get("averagePrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set averagePrice(value: BigInt) {
    this.set("averagePrice", Value.fromBigInt(value));
  }

  get lastSalePrice(): BigInt {
    let value = this.get("lastSalePrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lastSalePrice(value: BigInt) {
    this.set("lastSalePrice", Value.fromBigInt(value));
  }

  get dayData(): CollectionDayDataLoader {
    return new CollectionDayDataLoader(
      "Collection",
      this.get("id")!.toString(),
      "dayData",
    );
  }

  get weekData(): CollectionWeekDataLoader {
    return new CollectionWeekDataLoader(
      "Collection",
      this.get("id")!.toString(),
      "weekData",
    );
  }
}

export class CollectionDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CollectionDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CollectionDayData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CollectionDayData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CollectionDayData | null {
    return changetype<CollectionDayData | null>(
      store.get_in_block("CollectionDayData", id),
    );
  }

  static load(id: string): CollectionDayData | null {
    return changetype<CollectionDayData | null>(
      store.get("CollectionDayData", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collection(): string {
    let value = this.get("collection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set collection(value: string) {
    this.set("collection", Value.fromString(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get dailyVolume(): BigInt {
    let value = this.get("dailyVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dailyVolume(value: BigInt) {
    this.set("dailyVolume", Value.fromBigInt(value));
  }

  get dailySales(): BigInt {
    let value = this.get("dailySales");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dailySales(value: BigInt) {
    this.set("dailySales", Value.fromBigInt(value));
  }

  get dailyListings(): BigInt {
    let value = this.get("dailyListings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dailyListings(value: BigInt) {
    this.set("dailyListings", Value.fromBigInt(value));
  }

  get openPrice(): BigInt {
    let value = this.get("openPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set openPrice(value: BigInt) {
    this.set("openPrice", Value.fromBigInt(value));
  }

  get closePrice(): BigInt {
    let value = this.get("closePrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set closePrice(value: BigInt) {
    this.set("closePrice", Value.fromBigInt(value));
  }

  get highPrice(): BigInt {
    let value = this.get("highPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set highPrice(value: BigInt) {
    this.set("highPrice", Value.fromBigInt(value));
  }

  get lowPrice(): BigInt {
    let value = this.get("lowPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lowPrice(value: BigInt) {
    this.set("lowPrice", Value.fromBigInt(value));
  }

  get avgSalePrice(): BigInt {
    let value = this.get("avgSalePrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set avgSalePrice(value: BigInt) {
    this.set("avgSalePrice", Value.fromBigInt(value));
  }
}

export class CollectionWeekData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save CollectionWeekData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CollectionWeekData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("CollectionWeekData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): CollectionWeekData | null {
    return changetype<CollectionWeekData | null>(
      store.get_in_block("CollectionWeekData", id),
    );
  }

  static load(id: string): CollectionWeekData | null {
    return changetype<CollectionWeekData | null>(
      store.get("CollectionWeekData", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get collection(): string {
    let value = this.get("collection");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set collection(value: string) {
    this.set("collection", Value.fromString(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get weeklyVolume(): BigInt {
    let value = this.get("weeklyVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set weeklyVolume(value: BigInt) {
    this.set("weeklyVolume", Value.fromBigInt(value));
  }

  get weeklySales(): BigInt {
    let value = this.get("weeklySales");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set weeklySales(value: BigInt) {
    this.set("weeklySales", Value.fromBigInt(value));
  }

  get weeklyListings(): BigInt {
    let value = this.get("weeklyListings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set weeklyListings(value: BigInt) {
    this.set("weeklyListings", Value.fromBigInt(value));
  }

  get openPrice(): BigInt {
    let value = this.get("openPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set openPrice(value: BigInt) {
    this.set("openPrice", Value.fromBigInt(value));
  }

  get closePrice(): BigInt {
    let value = this.get("closePrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set closePrice(value: BigInt) {
    this.set("closePrice", Value.fromBigInt(value));
  }

  get highPrice(): BigInt {
    let value = this.get("highPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set highPrice(value: BigInt) {
    this.set("highPrice", Value.fromBigInt(value));
  }

  get lowPrice(): BigInt {
    let value = this.get("lowPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set lowPrice(value: BigInt) {
    this.set("lowPrice", Value.fromBigInt(value));
  }

  get avgSalePrice(): BigInt {
    let value = this.get("avgSalePrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set avgSalePrice(value: BigInt) {
    this.set("avgSalePrice", Value.fromBigInt(value));
  }

  get volumeChange(): BigInt {
    let value = this.get("volumeChange");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set volumeChange(value: BigInt) {
    this.set("volumeChange", Value.fromBigInt(value));
  }

  get priceChange(): BigInt {
    let value = this.get("priceChange");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set priceChange(value: BigInt) {
    this.set("priceChange", Value.fromBigInt(value));
  }
}

export class MarketplaceStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketplaceStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketplaceStat must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MarketplaceStat", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MarketplaceStat | null {
    return changetype<MarketplaceStat | null>(
      store.get_in_block("MarketplaceStat", id),
    );
  }

  static load(id: string): MarketplaceStat | null {
    return changetype<MarketplaceStat | null>(store.get("MarketplaceStat", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalListings(): BigInt {
    let value = this.get("totalListings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalListings(value: BigInt) {
    this.set("totalListings", Value.fromBigInt(value));
  }

  get totalActiveListings(): BigInt {
    let value = this.get("totalActiveListings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalActiveListings(value: BigInt) {
    this.set("totalActiveListings", Value.fromBigInt(value));
  }

  get totalSales(): BigInt {
    let value = this.get("totalSales");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalSales(value: BigInt) {
    this.set("totalSales", Value.fromBigInt(value));
  }

  get totalVolume(): BigInt {
    let value = this.get("totalVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalVolume(value: BigInt) {
    this.set("totalVolume", Value.fromBigInt(value));
  }

  get averagePrice(): BigInt {
    let value = this.get("averagePrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set averagePrice(value: BigInt) {
    this.set("averagePrice", Value.fromBigInt(value));
  }

  get totalCollections(): BigInt {
    let value = this.get("totalCollections");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalCollections(value: BigInt) {
    this.set("totalCollections", Value.fromBigInt(value));
  }

  get totalUsers(): BigInt {
    let value = this.get("totalUsers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalUsers(value: BigInt) {
    this.set("totalUsers", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }

  get dayData(): MarketplaceDayDataLoader {
    return new MarketplaceDayDataLoader(
      "MarketplaceStat",
      this.get("id")!.toString(),
      "dayData",
    );
  }

  get weekData(): MarketplaceWeekDataLoader {
    return new MarketplaceWeekDataLoader(
      "MarketplaceStat",
      this.get("id")!.toString(),
      "weekData",
    );
  }
}

export class MarketplaceDayData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketplaceDayData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketplaceDayData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MarketplaceDayData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MarketplaceDayData | null {
    return changetype<MarketplaceDayData | null>(
      store.get_in_block("MarketplaceDayData", id),
    );
  }

  static load(id: string): MarketplaceDayData | null {
    return changetype<MarketplaceDayData | null>(
      store.get("MarketplaceDayData", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get marketplace(): string {
    let value = this.get("marketplace");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set marketplace(value: string) {
    this.set("marketplace", Value.fromString(value));
  }

  get date(): BigInt {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set date(value: BigInt) {
    this.set("date", Value.fromBigInt(value));
  }

  get dailyVolume(): BigInt {
    let value = this.get("dailyVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dailyVolume(value: BigInt) {
    this.set("dailyVolume", Value.fromBigInt(value));
  }

  get dailySales(): BigInt {
    let value = this.get("dailySales");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dailySales(value: BigInt) {
    this.set("dailySales", Value.fromBigInt(value));
  }

  get dailyListings(): BigInt {
    let value = this.get("dailyListings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dailyListings(value: BigInt) {
    this.set("dailyListings", Value.fromBigInt(value));
  }

  get dailyActiveUsers(): BigInt {
    let value = this.get("dailyActiveUsers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set dailyActiveUsers(value: BigInt) {
    this.set("dailyActiveUsers", Value.fromBigInt(value));
  }

  get avgSalePrice(): BigInt {
    let value = this.get("avgSalePrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set avgSalePrice(value: BigInt) {
    this.set("avgSalePrice", Value.fromBigInt(value));
  }

  get volumeChange(): BigInt {
    let value = this.get("volumeChange");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set volumeChange(value: BigInt) {
    this.set("volumeChange", Value.fromBigInt(value));
  }

  get salesChange(): BigInt {
    let value = this.get("salesChange");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set salesChange(value: BigInt) {
    this.set("salesChange", Value.fromBigInt(value));
  }
}

export class MarketplaceWeekData extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save MarketplaceWeekData entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type MarketplaceWeekData must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("MarketplaceWeekData", id.toString(), this);
    }
  }

  static loadInBlock(id: string): MarketplaceWeekData | null {
    return changetype<MarketplaceWeekData | null>(
      store.get_in_block("MarketplaceWeekData", id),
    );
  }

  static load(id: string): MarketplaceWeekData | null {
    return changetype<MarketplaceWeekData | null>(
      store.get("MarketplaceWeekData", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get marketplace(): string {
    let value = this.get("marketplace");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set marketplace(value: string) {
    this.set("marketplace", Value.fromString(value));
  }

  get week(): BigInt {
    let value = this.get("week");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set week(value: BigInt) {
    this.set("week", Value.fromBigInt(value));
  }

  get weeklyVolume(): BigInt {
    let value = this.get("weeklyVolume");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set weeklyVolume(value: BigInt) {
    this.set("weeklyVolume", Value.fromBigInt(value));
  }

  get weeklySales(): BigInt {
    let value = this.get("weeklySales");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set weeklySales(value: BigInt) {
    this.set("weeklySales", Value.fromBigInt(value));
  }

  get weeklyListings(): BigInt {
    let value = this.get("weeklyListings");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set weeklyListings(value: BigInt) {
    this.set("weeklyListings", Value.fromBigInt(value));
  }

  get weeklyActiveUsers(): BigInt {
    let value = this.get("weeklyActiveUsers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set weeklyActiveUsers(value: BigInt) {
    this.set("weeklyActiveUsers", Value.fromBigInt(value));
  }

  get avgSalePrice(): BigInt {
    let value = this.get("avgSalePrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set avgSalePrice(value: BigInt) {
    this.set("avgSalePrice", Value.fromBigInt(value));
  }

  get volumeChange(): BigInt {
    let value = this.get("volumeChange");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set volumeChange(value: BigInt) {
    this.set("volumeChange", Value.fromBigInt(value));
  }

  get salesChange(): BigInt {
    let value = this.get("salesChange");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set salesChange(value: BigInt) {
    this.set("salesChange", Value.fromBigInt(value));
  }
}

export class PurchaseLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Purchase[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Purchase[]>(value);
  }
}

export class ListingLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Listing[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Listing[]>(value);
  }
}

export class CollectionDayDataLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): CollectionDayData[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<CollectionDayData[]>(value);
  }
}

export class CollectionWeekDataLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): CollectionWeekData[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<CollectionWeekData[]>(value);
  }
}

export class MarketplaceDayDataLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): MarketplaceDayData[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<MarketplaceDayData[]>(value);
  }
}

export class MarketplaceWeekDataLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): MarketplaceWeekData[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<MarketplaceWeekData[]>(value);
  }
}
